/*==============================================
	■■■주민등록번호 유효성 검사■■■
================================================*/
/*
○ 주민등록번호 검증 공식
	① 마지막 자리를 제외한 앞자기 수를 규칙에 맞고 곱한다.

	123456-1234567	(주민번호)
	****** *******	------------각자리수 곱하기
	234567 892345 (각 자리에 곱해질 수)


	② 규칙에 맞게 곱셈 연산을 수행한 결과를 모두 더한다.
	7 5 0 6 1 5 - 1 8 6 2 1 3 3
	* * * * * *   * * * * * * 
	2 3 4 5 6 7   8 9 2 3 4 5 
	===========================
	14 + 15 + 0 + 30 + 6 + 35 + 8 + 72 + 12  +6 + 4 + 15
	==217
	③ 더해진 결과값을 11로 나누어 나머지를 취한다. sum%%11==0

		19
      ------------
	11|217
	   11
	   --------
	   107
	    99
       ------
	     8 ---8이 나머지(O)

	④ 11에서 나머지 8을뺀 결과값을 구한다.

	11 - 8 → 3
	③의 처리과정에서 나머지가 0인경우 11 - 0 → 11
				   	나머지가 0인경우   11 - 1 → 10
	이를 다시 10으로 나누어 나머지를 취한다.  11 → 1
											  10 → 0

	⑤④의 연산결과가 주민번호를 구성하는 마지막 숫자와
	일치하는지의 여부를 비교하여 확인한다.

	일치   → 유효한 주민번호
	불일치 → 잘못된 주민번호
	
*/

//실행 예)
//주민번호입력(XXXXXX-XXXXXXX) : 123456-12345678 → 입력개수 초과
//>>입력 오류~!!
//계속하려면 아무 키나 누르세요......
//실행 예)
//주민번호입력(XXXXXX-XXXXXXX) : 123456-123456 → 입력개수 미달
//>>입력 오류~!!
//계속하려면 아무 키나 누르세요......

//주민번호입력(XXXXXX-XXXXXXX) : 750615-1252085 → 유효한 주민번호
//>>정확한 주민번호~!!!
//계속하려면 아무 키나 누르세요......

//주민번호입력(XXXXXX-XXXXXXX) : 750615-1252086 → 잘못된 주민번호
//>>잘못된 주민번호~!!!
//계속하려면 아무 키나 누르세요......

//※ 문제 해결을 위한 추가 팁~!

//배열.length			→ 배열의 길이(배열 방의갯수) 반환
//문자열.length()		→ 문자열의 길이 반환(빈칸까지)
//문자열.substring()	→ 문자열 추출
//문자열.substring(m, n)→ 문자열 m번째 위치에서 n-1번째 위치까지 추출(인덱스는 0부터)
//문자열.substring(m)	→ 문자열 m번째 위치에서 문자열의 끝까지 추출(인덱스는 0부터)

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
public class Test1060
{
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		//입력받는 주민번호(문자열 형태)를 담아둘 변수선언
		String str;
		//공식에 따라 주민변호의 각 자릿수에 곱하게 될 수 → 배열형태로 구성
		//          9  4  1  1  2  4  -  2  9  0  3  7  1  2
		int[] chk ={2, 3, 4, 5, 6, 7, 0, 8, 9, 2, 3, 4, 5};
		//								---check~!
		

		//곱셈 연산 후 누적합  →(각 곱셈을 결과를 더해나가라)
		//---------	    ======
		//				0으로 초기화
		int tot = 0;			//누적합 = 0인지 누적곱 = 1인지 확인 

		System.out.print("주민번호입력(XXXXXX-XXXXXXX) : ");
		//Intbr.readLine()
		str = br.readLine();

		if (str.length() != 14)		//길이가 길거나 짧은지 조건문으로 확인해야 하니까
		{
			System.out.println("입력 오류~!!");
			return;	//메소드 종료 main() 메소드 종료 → 프로그램 종료
		}
		//테스트
		//System.out.println(">>자릿수 적합");

		//ex)941124-2903712
		for (int i = 0;i<13 ;i++ )		//1 2 3 4 5 6 7 8 9 10 11 12

		{
			//테스트
			//System.out.print(i +" ");

			//str.substring(0 1)  추출하면 결과는 문자열이된다.	"9"
			if (i==6)
			{
				continue;			//뒷부분 무시하고 계속해라~!! -는 int로 못 바꿈
			}
			tot += chk[i] * Integer.parseInt(str.substring(i, (i+1))); //뒷부분
			//				str.substring(i, (i+1)) == -
			//i가 6일때에는 뒷부분을 무시하고 계속해라~!!


		}
		//테스트
		//System.out.print("tot" + tot);
		//---------------여기까지 수행하면 1,2,모두 끝낸상황이며
		//				규칙에 맞게 곱셈 연산을 수행한 결과를 모두 더한 값은 
		//				변수tot에 담겨있는 상태가된다.

		int su = 11 - tot % 11;		//여기까지 수행하면 ③과④를 모두 끝낸상황
		//							su에대한 연산결과사 두자리로 나올경우 주민번호
		//							마지막자리숫자와 비교수행 할 수 없는경우

		su = su % 10;			//su %= 10; 와같음

		if (su ==Integer.parseInt(str.substring(13)))			//복습체크 
		{
			System.out.println(">>정확한 주민번호~!!!");
		}
		else
			System.out.println(">>잘못된 주민번호~!!!");

	}
}
/*실행 결과

주민번호입력(XXXXXX-XXXXXXX) : 941124-2903712
>>정확한 주민번호~!!!
계속하려면 아무 키나 누르십시오 . . .

주민번호입력(XXXXXX-XXXXXXX) : 2414141-23123213213
입력 오류~!!
계속하려면 아무 키나 누르십시오 . . .


*/