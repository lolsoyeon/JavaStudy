/*==============================================
   ■■■ 클래스 고급 ■■■ 2022-07-21
	- 중첩 클래스
===============================================*/
/*
	○ 중첩 클래스

	중첩 클래스란 클래스안에 다른 클래스가 설계되어 있는 형태로
	클래스 내부에서만 사용할 보조 클래스가 필요한 경우
	클래스를 중첩하여 프로그램의 구조를 보다 더 간단하고 알아보기 쉽도록
	만들 수 있는데 이러한 클래스를 중첩 클래스라 한다.
	이는, 특정 클래스를 자신의 클래스 내부적인 용도로만 사용할 목적으로 쓰이는데
	특정 클래스를 마치 자신의 멤버 변수나 메소드처럼 사용 할 수있게 한다.

	○ 중첩 클래스의 종류(4가지)
	1. static 중첩 클래스(중첩 내부 클래스)

		클래스 내부에 ...『public static class 클래스명』

		중첩 클래스를 감싸는 외부 클래스의{} 안에
		stiatic 을 붙인 새로운 클래스를 설계하는 식으로
		모든 접근제어 지시자를 사용 할 수있다.
		중첩 클래스가 포함하고있는 메소드에서는
		외부클래스의 인스턴스 변수나 인스턴스 메소드에는 접근할 수 없고,
		(외부 클래스의 객체를 생성하지 않은 상태)
		클래스 변수와 클래스 메소드만 접근 할 수있다.

		- 프로그램의 구조를 보다 더 간단하고 알아보기 쉽게 구성할 수 있다.
		『static』으로 선언된 내부클래스이다
		- 중첩 클래스의 객체는 중첩 클래스를 포함하고있는
		외부 클래스,의 객체와 동등하다,
		- 외부 클래스의 클래스변수와 클래스 매소드는
		바로 접근하여 사용하는것이 가능하다
		- 중첩 클래스와 중첩클래스를 포함하고있는 외부 클래스의
		인스턴스 변수와 인스천스 메소드는
		객체를 생성하며 서로접근하는것이 가능하다.
		- 중첩 클래스를 외부에서 단독으로 사용하는것이 가능하다.


	2. 내부 클래스(inner class)    
	클래스 내부에 .....『public class클래스명』   static이 빠진 형태
	- static 중첩 클래스와 마찬가지로 프로그램 구조를 보다 더 간단하고
	알아보기 쉽도록 한 것이다.
	 - 외부 클래스의 메소드에서 내부 멤버 클래스를 사용하기 위해서는
	 반드시 내부 멤버 클래스 객체를 생성해 주어야한다.
	 - 외부 의 멤버 변수와 메소드를
	 객체 생성 없이 바로 사용하는 것이 가능하다.
	 - 내부 멤버 클래스는 외부에서 단독으로 객체를 생성하여
	 사용할 수없다.
	 즉, 내부 멤버 클래스는 외부 클래스의 인스턴스 생성이
	 선행되어야 한다는것이다.
	 - static 으로 선언된 변수 또는 메소드를 가질 수 없다.

	3. 지역 클래스(로컬 클래스 ,local class)
	메소드 내부에....『class클래스명』
				 또는『static class클래스명』

	- 클래스의 메소드 안에서 클래스를 정의하는것으로
	 내부 멤버 클래스와 유사한 성격을 가지고 있긴 하지만
	 접근제어지시자는 붙일 수없다.

	4. 무명 클래스(익명 클래스 , annonymous class) 가끔 안드로이드 이벤트 처리시 사용
	이름 없는 클래스

	 - 클래스 또는 인터페이스에 대한 객체를 생성하면서
	   바로 클래스 또는 인터페이스를 정의하는 클래스
	 - 정의하는 부분과 생성하는 부분이 하나로 묶여져
	   new 수식이 있는 곳에서 바로 클래스 또는 인터페이스를
	   정의하는 것을 의미한다.

	  new 객체의생성자()
	  {
		  ....
	  };

	  예시)
	  class 클래스명
	  {
		  arr[1] = new Rect()
		  {
			  ......;

		  };← 세미콜론 포인트~!~!
	  }


*/

//원래는 설계도를 인스턴스생성해서 쓴다
public class Test122
{
	public static void main(String[] args)
	{
		
	}
}